module CarPark {

    struct Date {
        long days;
        long months;
        long years;
    };

    struct Time {
        long seconds;
        long minutes;
        long hours;
    };

    struct VehicleEvent {
    	Time time;
    	Date date;
    	string registration_number;
    	short duration;
    	double cost;
    	string operation;
    };

    struct Machines {
        string machine_name;
        string machine_type;
        string ior;
        boolean enabled;
    };

    struct Alerts {
        string alertType;
        string overStayedBy;
        string serverName;
        VehicleEvent vehicleEvent;
    };


    typedef sequence<VehicleEvent> Log_of_vehicle_events;
    typedef sequence<Machines> Log_of_machines;
    typedef sequence<Alerts> Log_of_alerts;

 interface CompanyHQ;

    interface LocalServer {
    	readonly attribute string server_name;
    	readonly attribute long spaces;
    	readonly attribute Log_of_vehicle_events events_log;
    	readonly attribute Log_of_machines machine_log;
    	Log_of_vehicle_events return_log();
    	boolean vehicle_in(in VehicleEvent event);
    	boolean vehicle_out(in VehicleEvent event);
    	boolean vehicle_pay(in VehicleEvent event);
    	boolean vehicle_paid_for(in string registration_number);
    	boolean check_vehicle_in_car_park(in string registration_number);
    	boolean check_vehicle_out_car_park(in string registration_number);
    	double return_cash_total();
    	long return_spaces();
    	void register_server(in string name, in long spaces, in CompanyHQ hq);
    	void add_entry_gate(in Machines machine);
    	void add_exit_gate(in Machines machine);
    	void add_pay_station(in Machines machine);
    	void change_machine_state(in string machine_name, in string machine_type, in boolean state);
    };

    struct LocalServers {
        string name;
        string ior;
        LocalServer obj;
    };

    typedef sequence<LocalServers> Log_of_local_servers;

    interface CompanyHQ {
        readonly attribute Log_of_local_servers server_log;
        void raise_alarm(in Alerts alert);
        void register_local_server(in string name, in string ior, in LocalServer obj);
        Log_of_alerts return_alerts();
        Log_of_machines return_machines(in short server);
    };

    interface EntryGate {
		readonly attribute string machine_name;
		readonly attribute boolean status;
		void register_gate(in string name, in string ior, in LocalServer obj);
		boolean vehicle_entered(in Date date, in Time time, in string registration);
		void turn_on(in string machine_name, in string machine_type);
		void turn_off(in string machine_name, in string machine_type);
		void reset(in string machine_name, in string machine_type);
	};

	interface ExitGate {
        readonly attribute string machine_name;
        readonly attribute boolean status;
        void register_gate(in string name, in string ior, in LocalServer obj);
        boolean vehicle_exited(in Date date, in Time time, in string registration);
        void turn_on(in string machine_name, in string machine_type);
        void turn_off(in string machine_name, in string machine_type);
        void reset(in string machine_name, in string machine_type);
    };

    interface PayStation {
        readonly attribute string machine_name;
        readonly attribute boolean status;
        void register_station(in string name, in string ior, in LocalServer obj);
        boolean pay(in string registration, in Date datePaid, in Time timePaid, in short duration, in double cost);
        double return_cash_total();
        void turn_on(in string machine_name, in string machine_type);
        void turn_off(in string machine_name, in string machine_type);
        void reset(in string machine_name, in string machine_type);
     };
};